import Data.Map (fromList, toList)
import Data.Char (toUpper)
import Statistics.Sample (mean, stdDev)

-- Ejercicio 1: Aplicar un descuento
aplicarDescuento :: Float -> Float -> Float
aplicarDescuento precio porcentaje = precio * (1 - porcentaje / 100)

aplicarIVA :: Float -> Float -> Float
aplicarIVA precio porcentaje = precio * (1 + porcentaje / 100)

precioFinalCesta :: [(String, Float)] -> (Float -> Float -> Float) -> [(String, Float)] 
precioFinalCesta cesta funcion = [(producto, funcion precio 10) | (producto, precio) <- cesta]

-- Ejercicio 2: Aplicar una función
aplicarFuncion :: (a -> b) -> [a] -> [b]
aplicarFuncion _ [] = []
aplicarFuncion f (x:xs) = f x : aplicarFuncion f xs

-- Ejercicio 3: Obtener un diccionario
palabrasConLongitud :: String -> [(String, Int)]
palabrasConLongitud frase = map (\palabra -> (palabra, length palabra)) (words frase)

diccionarioConLongitud :: String -> [(String, Int)]
diccionarioConLongitud frase = fromList (palabrasConLongitud frase)

-- Ejercicio 4: Convertir a mayúsculas
calificarNotas :: Map String Float -> Map String String
calificarNotas notas = fromList $ map (\(asignatura, nota) -> 
    (map toUpper asignatura, calificacion nota)) (toList notas)
  where
    calificacion nota
      | nota >= 95 = "Excelente"
      | nota >= 85 = "Notable"
      | nota >= 75 = "Bueno"
      | nota >= 70 = "Suficiente"
      | otherwise = "Desempeño insuficiente"

-- Ejercicio 5: Calcular el módulo de un vector
moduloVector :: [Float] -> Float
moduloVector vector = sqrt (sum (map (^2) vector))

-- Ejercicio 6: Detectar valores atípicos
valoresAtipicos :: [Float] -> [Float]
valoresAtipicos muestra = filter esValoreAtipico muestra
  where
    m = mean muestra
    s = stdDev muestra
    esValoreAtipico x = abs ((x - m) / s) > 3
